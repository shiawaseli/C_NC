Exception处理流程：
	1、在程序运行的过程之中才会产生异常，而一旦程序执行中产生了异常之后将自动进行指定类型的异常类对象实例化
	2、如果此时程序中没有提供异常处理的支持，则会采用JVM默认异常处理方式，首先进行异常信息的打印，而后直接退出当前程序
	3、此时程序中如果存在有异常处理，那么这个产生的异常类的实例化对象将会被try语句所捕获
	4、try捕获到异常之后与其匹配的catch中的异常类型进行依次的比对，如果此时与catch中的捕获异常类型相同，则认为应该使用此catchj进行异常处理
	如果不匹配，则继续匹配后续的catch类型，如果没有任何的catch匹配成功，那么就表示该异常无法进行处理
	5、不管异常是否处理最终都要执行finally语句，，但是当执行完成finally的程序之后会进一步判断当前的异常是否已经处理过了，如果处理过了，则继续向后执行其它代码
	如果没有处理则交由JVM进行默认的处理
		通过分析可以发现在整个异常处理流程实际上操作的还是一个异常类的实例化对象，那么这个异常的实例化类型就成为了理解异常处理的关键

Class ArithmeticException 异常继承结构如下：
	java.lang.Object
		|- java.lang.Throwable
			|- java.lang.Exception
				|- java.lang.RuntimeException
					|- java.lang.ArithmeticException
					
Class ArrayIndexOutOfBoundsException 异常继承结构如下：
	java.lang.Object
		|- java.lang.Throwable
			|- java.lang.Exception
				|- java.lang.RuntimeException
					|- java.lang.IndexOutOfBoundsException
						|- java.lang.ArrayIndexOutOfBoundsException
						
Class NumberFormatException 异常继承结构如下：
	java.lang.Object
		|- java.lang.Throwable
			|- java.lang.Exception
				|- java.lang.RuntimeException
					|- java.lang.IllegalArgumentException
						|- java.lang.NumberFormatException

在程序中可以处理的异常的最大的类型就是Throwable，其有两个子类
	Error： 程序还未执行出现的错误，开发者无法处理
	Exception： 程序中出现的异常，开发者可以处理，真正在开发之中所需要关注的就是Exception
		所有需要处理的异常都是Exception的子类，都可以用Exception进行处理
		在进行异常捕获时，必须把范围大的异常放在范围效地异常之后

throws关键字：
	告诉使用者这个方法可能会出现的异常
throw关键字；
	用于方法编写者手动抛出异常
面试题： 请解释throw与throws区别？
	throw： 是在代码块中使用的，主要是手工进行异常对象的抛出
	throws： 是在方法定义上使用的，用于将此方法中可能产生的异常明确地告诉给调用者，需要由调用处进行处理

注意： 
	如果现在所有的程序执行上只要使用了throws定义的方法必须要求开发者进行手工处理，那么这个代码的编写就太麻烦了，
	所以在设计的过程中，考虑到代码编写的方便，所以提供有一个灵活的可选的异常处理父类"RuntimeException"，
	这个类的子类可以不需要强制性处理

面试题： 请解释RuntimeException与Exception的区别？请列举出几个你常见的RuntimeException
	RuntimeException是Exception的子类
	RuntimeException标注的异常可以不需要进行强制性处理，而Exception异常必须强制性处理
	常见的RuntimeException异常： NumberFormatException、ClassCastException、NullPointerException、IndexOutOfBoundsException

